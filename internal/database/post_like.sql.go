// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: post_like.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getLikedPosts = `-- name: GetLikedPosts :many
SELECT id, created_at, user_id, post_id FROM liked_posts WHERE user_id=$1
`

func (q *Queries) GetLikedPosts(ctx context.Context, userID uuid.UUID) ([]LikedPost, error) {
	rows, err := q.db.QueryContext(ctx, getLikedPosts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LikedPost
	for rows.Next() {
		var i LikedPost
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.PostID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLikesOfPost = `-- name: GetLikesOfPost :many
SELECT id, created_at, user_id, post_id FROM liked_posts WHERE post_id=$1
`

func (q *Queries) GetLikesOfPost(ctx context.Context, postID uuid.UUID) ([]LikedPost, error) {
	rows, err := q.db.QueryContext(ctx, getLikesOfPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LikedPost
	for rows.Next() {
		var i LikedPost
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.PostID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const likePost = `-- name: LikePost :one
INSERT INTO liked_posts (id, user_id, post_id)
VALUES ($1, $2, $3)
RETURNING id, created_at, user_id, post_id
`

type LikePostParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
	PostID uuid.UUID
}

func (q *Queries) LikePost(ctx context.Context, arg LikePostParams) (LikedPost, error) {
	row := q.db.QueryRowContext(ctx, likePost, arg.ID, arg.UserID, arg.PostID)
	var i LikedPost
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.PostID,
	)
	return i, err
}

const unlikePost = `-- name: UnlikePost :exec
DELETE FROM liked_posts WHERE post_id=$1 AND user_id=$2
`

type UnlikePostParams struct {
	PostID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) UnlikePost(ctx context.Context, arg UnlikePostParams) error {
	_, err := q.db.ExecContext(ctx, unlikePost, arg.PostID, arg.UserID)
	return err
}
