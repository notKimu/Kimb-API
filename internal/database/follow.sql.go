// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: follow.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const followUser = `-- name: FollowUser :one
INSERT INTO follows (id, user_id, followed_id)
VALUES ($1, $2, $3)
RETURNING id, created_at, user_id, followed_id
`

type FollowUserParams struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	FollowedID uuid.UUID
}

func (q *Queries) FollowUser(ctx context.Context, arg FollowUserParams) (Follow, error) {
	row := q.db.QueryRowContext(ctx, followUser, arg.ID, arg.UserID, arg.FollowedID)
	var i Follow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.FollowedID,
	)
	return i, err
}

const getFollowers = `-- name: GetFollowers :many
SELECT id, created_at, user_id, followed_id FROM follows WHERE followed_id=$1
`

func (q *Queries) GetFollowers(ctx context.Context, followedID uuid.UUID) ([]Follow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowers, followedID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Follow
	for rows.Next() {
		var i Follow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.FollowedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowing = `-- name: GetFollowing :many
SELECT id, created_at, user_id, followed_id FROM follows WHERE user_id=$1
`

func (q *Queries) GetFollowing(ctx context.Context, userID uuid.UUID) ([]Follow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowing, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Follow
	for rows.Next() {
		var i Follow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.FollowedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollow = `-- name: Unfollow :exec
DELETE FROM follows WHERE user_id=$1 AND followed_id=$2
`

type UnfollowParams struct {
	UserID     uuid.UUID
	FollowedID uuid.UUID
}

func (q *Queries) Unfollow(ctx context.Context, arg UnfollowParams) error {
	_, err := q.db.ExecContext(ctx, unfollow, arg.UserID, arg.FollowedID)
	return err
}
